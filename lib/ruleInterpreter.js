// Generated by CoffeeScript 1.9.3
var UNKNOWN_OPERATOR_ERROR, UNKNOWN_PARAMETER_ERROR, UNKNOWN_TYPE_ERROR, evaluate, moment, recursive_evaluate, restrictions, util;

util = require("util");

moment = require("moment");

UNKNOWN_OPERATOR_ERROR = "Evaluation Error: Unknown operator '%s'.";

UNKNOWN_TYPE_ERROR = "Evaluation Error: A node of an unknown type '%s' was found.";

UNKNOWN_PARAMETER_ERROR = "Evaluation Error: The parameter '%s' is not supported.";

restrictions = {
  time: function(value) {
    var fromTime, now, ref, result, toTime;
    ref = value.split("-"), fromTime = ref[0], toTime = ref[1];
    fromTime = moment(fromTime, "h:m");
    toTime = moment(toTime, "h:m");
    now = moment();
    result = (fromTime.isBefore(now)) && (now.isBefore(toTime));
    return result;
  }
};

recursive_evaluate = function(condition) {
  if (condition.type === "BinaryExpression") {
    if (condition.operator === "|") {
      return (recursive_evaluate(condition.left)) || (recursive_evaluate(condition.right));
    } else if (condition.operator === "&") {
      return (recursive_evaluate(condition.left)) && (recursive_evaluate(condition.right));
    } else {
      throw new Error(util.format(UNKNOWN_OPERATOR_ERROR, condition.operator));
    }
  } else if (condition.type === "Restriction") {
    if (restrictions[condition.param] != null) {
      return restrictions[condition.param](condition.value);
    } else {
      throw new Error(util.format(UNKNOWN_PARAMETER_ERROR, condition.param));
    }
  } else {
    throw new Error(util.format(UNKNOWN_TYPE_ERROR, condition.type));
  }
};

evaluate = function(condition, callback) {
  var error, result;
  try {
    result = recursive_evaluate(condition);
    return callback(null, result);
  } catch (_error) {
    error = _error;
    return callback(error, null);
  }
};

module.exports = {
  evaluate: evaluate
};
