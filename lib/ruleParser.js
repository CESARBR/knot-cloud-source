// Generated by CoffeeScript 1.9.3
var LITERAL_PLACEHOLDER, PARAM_WITHOUT_VALUE_MESSAGE, fillLeafRestriction, fillTreeRestrictions, jsep, parseRules, setupJsep, util;

jsep = require("jsep");

util = require("util");

PARAM_WITHOUT_VALUE_MESSAGE = "Syntax Error: Condition '%s' doesn't contains an '=' character.";

LITERAL_PLACEHOLDER = "0";

setupJsep = function() {
  jsep.addBinaryOp("|", 1);
  return jsep.addBinaryOp("&", 2);
};

parseRules = function(rules, callback) {
  var error, jsepInput, restrictions, tree;
  restrictions = rules.split(/[\|&]/);
  jsepInput = rules.replace(/[^\|&]+/g, LITERAL_PLACEHOLDER);
  try {
    tree = jsep(jsepInput);
    fillTreeRestrictions(tree, restrictions);
    return callback(null, tree);
  } catch (_error) {
    error = _error;
    return callback(error, null);
  }
};

fillTreeRestrictions = function(tree, restrictions) {
  if (tree.type === "BinaryExpression") {
    fillTreeRestrictions(tree.left, restrictions);
    return fillTreeRestrictions(tree.right, restrictions);
  } else if (tree.type === "Literal") {
    return fillLeafRestriction(tree, restrictions.shift());
  }
};

fillLeafRestriction = function(leaf, restriction) {
  var ref;
  leaf.type = "Restriction";
  ref = restriction.split("="), leaf.param = ref[0], leaf.value = ref[1];
  if (!((leaf.param != null) && (leaf.value != null))) {
    throw new Error(util.format(PARAM_WITHOUT_VALUE_MESSAGE, restriction));
  }
  return delete leaf.raw;
};

setupJsep();

module.exports = {
  parse: parseRules
};
