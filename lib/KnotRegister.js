'use strict'
var _ = require('lodash');
var debug = require('debug')('meshblu:register');
var generateToken = require('./generateToken');
var logEvent = require('./logEvent');
var knotUser = require('./knotUser');

module.exports = function(device, callback, dependencies) {
  var database, devices, newDevice, oldUpdateDevice, ref, ref1, uuid;
  if (device == null) {
    device = {};
  }
  if (callback == null) {
    callback = _.noop;
  }
  if (dependencies == null) {
    dependencies = {};
  }
  uuid = dependencies.uuid || (require('node-uuid')).v4();
  database = (ref = dependencies.database) != null ? ref : require('./database');
  oldUpdateDevice = (ref1 = dependencies.oldUpdateDevice) != null ? ref1 : require('./oldUpdateDevice');
  devices = database.devices;
  device = _.cloneDeep(device);
  newDevice = {
    uuid: uuid,
    online: false
  };
  debug("registering", device);
  return devices.insert(newDevice, (function(_this) {
    return function(error) {
      debug('inserted', error);
      if (error != null) {
        return callback(new Error('Device not registered'));
      }
      if (device.token == null) {
        var token = generateToken();
        device.token = token;
        device.uuid = uuid;
        if(device.user){
          knotUser.encryptDevice(device);
        }
      }
      if (device.owner) {
        if (device.discoverWhitelist == null) {
          device.discoverWhitelist = [
            {
              uuid: device.owner,
              rule: ''
            }
          ];
        }
      }
      if (device.owner) {
        if (device.configureWhitelist == null) {
          device.configureWhitelist = [
            {
              uuid: device.owner,
              rule: ''
            }
          ];
        }
      }
      debug('about to update device', device);
      return oldUpdateDevice(newDevice.uuid, device, function(error, savedDevice) {
        if (error != null) {
          return callback(new Error('Device not updated'));
        }
        logEvent(400, savedDevice);
        savedDevice.token = device.token;
        return callback(null, savedDevice);
      });
    };
  })(this));
};

// ---
// generated by coffee-script 1.9.2